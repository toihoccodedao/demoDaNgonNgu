<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HomePageDescription" xml:space="preserve">
    <value>고객은 매우 중요하며, 고객은 고객에 의해 따라올 것입니다. 때로는 차량을 운전하지도 않고, 마시기 쉬운 음료를 마십니다. 그것은 무료 계곡 트럭이나 삶의 초콜릿 바와 같습니다. 배는 방금 독살당했습니다. 그러나 호수와 개발자들의 큰 온기로부터 완전한 애도가 나옵니다. 나는 읽었지만 가끔 초콜릿을 먹으며, 그것은 단지 단순한 지혜였고, 황홀감이 없다는 것은 중요하지 않았습니다.

펠렌테스크 화살이나 순수한 화살은 없으며, 틴시던트 두려움 엘리펜드가 있습니다. 그는 단지 한계 안에서 산업에 종사하고 싶었지만, 엘리펜드는 마시고 싶어합니다. Curabitur et eros eu lorem lacinia ultrices a ac eros.

광대한 초원이 끝없이 펼쳐져 있으며, 부드러운 바람에 흔들리는 꽃의 바다가 시간의 아름다움을 속삭입니다. 위에서는 황금빛 태양이 세상을 따뜻함으로 덮고, 그 아래에서 땅은 활기찬 에너지로 살아 있는 듯 보였습니다.

하지만 그 깊은 곳에는 조용한 우울함이 지속되었으며, 지평선 너머의 무언가를 향한 갈망이 있었습니다. 개발자들은 끊임없이 일하며, 그들의 손은 꿈을 현실로 바꾸고 있었습니다. 그들은 잠시 멈추고, 훔친 초콜릿 순간의 달콤한 씁쓸함을 음미했습니다.

강은 꾸준히 흐르며, 시간의 흐름을 조용히 목격합니다. 그 물은 승리와 절망의 이야기를 실어 나르고, 표면은 희망의 빛과 불확실성의 그림자를 반사합니다.

숲은 새들의 지저귐으로 울려 퍼지며, 각각의 음표는 기쁨과 갈망으로 가슴을 채우는 멜로디를 이룹니다. 바로 이곳에서, 자연의 품속에서, 사람들은 산업의 끊임없는 행진 속 혼란으로부터 위안을 찾을 수 있습니다.

그리고 그 고요함 속에서, 움직임이 있었습니다. 한 마리의 사슴이 우아하게 뛰어올라, 인생의 덧없는 아름다움을 상기시켰습니다. 근처에서는 바람이 나뭇잎을 흔들며, 호숫가에서 놀고 있는 아이들의 웃음소리와 함께 속삭였습니다.

꿈은 나무 위의 꽃들처럼 잠시 동안 피었다가 땅으로 떨어져, 달콤쌉쌀한 기억을 남겼습니다. Curabitur et eros eu lorem lacinia ultrices a ac eros. 앞으로 내딛는 모든 걸음은 뒤를 돌아보는 시선과 동반되었으며, 희망과 향수의 춤이었습니다. 여정은 결코 끝나지 않습니다. 마음은 항상 더 많은 것을 갈망하기 때문입니다.

황혼이 내려오면서 하늘은 주황색과 보라색으로 물들었고, 자연의 예술 작품으로서의 캔버스를 만들었습니다. 별들은 처음에는 희미하게 빛나다가, 용감하게 하늘을 영원한 빛으로 밝혔습니다.

멀리서 올빼미가 울부짖으며, 고요한 풍경에 신비감을 더했습니다. 그 목소리는 오래된 이야기를 암시했지만, 밤은 결코 이를 드러내지 않을 것입니다.

광활한 하늘 아래, 땅은 더 작아 보였지만, 무한한 경이로움으로 가득 차 있었습니다. 모든 돌, 나무, 물결은 이야기들을 품고 있었으며, 멈추고 들을 용기가 있는 사람들에게 발견되기를 기다리고 있었습니다.

바람의 속삭임은 새로운 모험의 약속을 실어 나르며, 앞으로 펼쳐질 미지의 길을 탐험하라는 초대를 전했습니다. 그러나 마음은 잠시 동안 만족하며, 강처럼 흐르는 삶의 아름다움을 단순히 존재하는 것만으로도 즐길 수 있었습니다.

세상은 무관심하지만 장엄하게 돌아가며, 혼돈과 조화의 섬세한 균형을 유지했습니다. 시간은 멈췄고, 그 정적 속에서 인생의 진정한 의미는 명확해졌습니다. 순간을 소중히 여기고, 꿈꾸며, 계속 앞으로 나아가는 것이었습니다.</value>
  </data>
  <data name="WelcomeMessage" xml:space="preserve">
    <value>음식 블로그</value>
  </data>
</root>